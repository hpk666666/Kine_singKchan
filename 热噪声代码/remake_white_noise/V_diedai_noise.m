function data=V_diedai_noise(n,Ve,VL,V0,E,Ka,Lb,L,H_0,H_1,delta_1,delta_2)
data=zeros(5,n+1);%生成一个5行n+1列的0矩阵
data(:,1)=H_0;%H_0
data(:,2)=H_1;%H_1
%矩阵左除，x = A\B 是方程 Ax = B 的解。矩阵 A 和 B 必须拥有相同的行数。
ta_2=[1/(delta_1^2),0,          0,          0,          0;           
      0,          1/(delta_1^2),0,          0,          0; 
      0,          0,          1/(delta_1^2),0,          0; 
      0,          0,          0,          1/(delta_1^2),0; 
      0,          0,          0,          0,          1/(delta_2^2)]; 
tc_2=[4*Ka(1)-L,-Lb(1),           0,                 0,                0;
     -4*Ka(1),   3*Ka(1)+Lb(1)-L,-2*Lb(1),           0,                0; 
      0,        -3*Ka(1),         2*(Ka(1)+Lb(1))-L,-3*Lb(1),          0; 
      0,         0,              -2*Ka(1),          (Ka(1)+3*Lb(1))-L,-4*Lb(1); 
      0,         0,               0,                -Ka(1),            4*Lb(1)-E];
td_2=[-L*(V0-VL),0,        0,        0,        0;
      0,        -L*(V0-VL),0,        0,        0; 
      0,         0,       -L*(V0-VL),0,        0; 
      0,         0,        0,       -L*(V0-VL),0; 
      0,         0,        0,        0,       -E*(V0-Ve)];
data(:,3)=(ta_2)*(tc_2*data(:,1)+td_2*data(:,2));
for i=3:n
    ta_i=[1/(0.5*i*(i-1)*delta_1^2),0,                    0,                    0,                     0;           
          0,                    1/(0.5*i*(i-1)*delta_1^2),0,                    0,                    0; 
          0,                    0,                    1/(0.5*i*(i-1)*delta_1^2),0,                    0; 
          0,                    0,                    0,                    1/(0.5*i*(i-1)*delta_1^2),0; 
          0,                    0,                    0,                    0,                    1/(0.5*i*(i-1)*delta_2^2)]; 
    tc_i=[4*Ka(1)-(i-1)*L,-Lb(1),                 0,                       0,                      0;
         -4*Ka(1),         3*Ka(1)+Lb(1)-(i-1)*L,-2*Lb(1),                 0,                      0; 
          0,              -3*Ka(1),               2*(Ka(1)+Lb(1))-(i-1)*L,-3*Lb(1),                0; 
          0,               0,                    -2*Ka(1),                (Ka(1)+3*Lb(1))-(i-1)*L,-4*Lb(1); 
          0,               0,                     0,                      -Ka(1),                  4*Lb(1)-(i-1)*E];
    td_i=[-(i-1)*L*(V0-VL),0,             0,             0,             0;
            0,           -(i-1)*L*(V0-VL),0,             0,             0; 
            0,             0,           -(i-1)*L*(V0-VL),0,             0; 
            0,             0,             0,           -(i-1)*L*(V0-VL),0; 
            0,             0,             0,             0,           -(i-1)*E*(V0-Ve)];
    tb=zeros(5,1);
    for j=2:i-1
        tb_j=[4*Ka(j),-Lb(j),         0,               0,              0;
             -4*Ka(j), 3*Ka(j)+Lb(j),-2*Lb(j),         0,              0; 
              0,      -3*Ka(j),       2*(Ka(j)+Lb(j)),-3*Lb(j),        0; 
              0,       0,            -2*Ka(j),        (Ka(j)+3*Lb(j)),-4*Lb(j); 
              0,       0,             0,              -Ka(j),          4*Lb(j)];
        tb =tb+tb_j*data(:,i-j);
    end
    data(:,i+1)=(ta_i)*(tb+tc_i*data(:,i-1)+td_i*data(:,i));
end
end